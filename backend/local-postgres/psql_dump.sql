CREATE TABLE strategies (
    investment_strategy INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    risk_lower_bound INT NOT NULL,
    risk_upper_bound INT NOT NULL,
    strategy_description VARCHAR NOT NULL,
    UNIQUE (risk_lower_bound, risk_upper_bound)
);

CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email_address VARCHAR UNIQUE NOT NULL,
    password_hash VARCHAR NOT NULL,
    first_name VARCHAR NOT NULL,
    middle_name VARCHAR,
    last_name VARCHAR NOT NULL,
	investment_strategy INT REFERENCES strategies ON DELETE SET NULL
);

CREATE TABLE holdings (
    user_id INT NOT NULL REFERENCES users ON DELETE CASCADE,
    stock_ticker VARCHAR NOT NULL,
    number_of_shares INT NOT NULL,
    PRIMARY KEY (user_id, stock_ticker)
);

CREATE TABLE stock_prices (
    stock_ticker VARCHAR,
    timestamp TIMESTAMP NOT NULL,
    price MONEY NOT NULL CHECK (price > '0'),
    PRIMARY KEY (stock_ticker, timestamp)
);

INSERT INTO strategies VALUES
    (0, 0, 100, 'Risky'),
    (1, 0, 50, 'More conservative'),
    (2, 0, 25, 'Safe');

INSERT INTO stock_prices VALUES
    ('GME', '2021-05-10 10:00:00', 9000),
    ('GME', '2021-05-10 11:00:00', 9100),
    ('GME', '2021-05-10 12:00:00', 9200),
    ('GME', '2021-05-10 13:00:00', 9300),
    ('AMC', '2021-05-10 10:00:00', 50),
    ('AMC', '2021-05-10 11:00:00', 100),
    ('AMC', '2021-05-10 12:00:00', 200),
    ('AMC', '2021-05-10 13:00:00', 25),
    ('BORING', '2021-05-10 10:00:00', 101),
    ('BORING', '2021-05-10 11:00:00', 102),
    ('BORING', '2021-05-10 12:00:00', 102.5),
    ('BORING', '2021-05-10 13:00:00', 102);

INSERT INTO users VALUES
    (1, 'user1@example.com', 'some hash', 'User', NULL, '1'),
    (2, 'user2@example.com', 'some hash', 'User', NULL, '2'),
    (3, 'user3@example.com', 'some hash', 'User', NULL, '3'),
    (4, 'user4@example.com', 'some hash', 'User', NULL, '4'),
    (5, 'user5@example.com', 'some hash', 'User', NULL, '5');

INSERT INTO holdings VALUES
    (1, 'GME', 10),
    (1, 'AMC', 10),
    (2, 'GME', 5);

CREATE MATERIALIZED VIEW stock_statistics AS
    SELECT
        stock_prices.stock_ticker,
        current.price AS current_price,
        MAX(stock_prices.price) AS max_price,
        MIN(stock_prices.price) AS min_price,
        STDDEV(CAST (stock_prices.price as numeric)) AS standard_deviation
    FROM stock_prices, (
        select distinct on (stock_ticker)
            stock_ticker,
            price,
            timestamp
        from stock_prices
        order by stock_ticker, timestamp desc
    ) current
    WHERE stock_prices.stock_ticker = current.stock_ticker
    GROUP BY stock_prices.stock_ticker, current.price;

-- select * from stock_statistics;
--  stock_ticker | current_price | max_price | min_price |   standard_deviation
-- --------------+---------------+-----------+-----------+------------------------
--  AMC          |        $25.00 |   $200.00 |    $25.00 |    77.3923984208612915
--  BORING       |       $102.00 |   $102.50 |   $101.00 | 0.62915286960589580810
--  GME          |     $9,300.00 | $9,300.00 | $9,000.00 |       129.099444873581
